pval = numeric(p);
for (i in 1:p){
fm = lm(y~1+x1[,i]);
gammahall[i] = summary(fm)$coefficients[2,1];
sg2all[i] = summary(fm)$coefficients[2,2]^2;
pval[i] = summary(fm)$coefficients[2,4];
fm = lm(z~1+x2[,i]);
Gammahall[i] = summary(fm)$coefficients[2,1];
sG2all[i] = summary(fm)$coefficients[2,2]^2;
}
index = 1:p
sig.indx = index#[pval<0.05/p]
sg2 = sg2all[sig.indx];
sG2 = sG2all[sig.indx];
gammah = gammahall[sig.indx];
Gammah = Gammahall[sig.indx];
if (!require("devtools")) { install.packages("devtools") } else {}
devtools::install_github("rondolab/MR-PRESSO")
library(MRPRESSO);
data(SummaryStats)
# Run MR-PRESSO global method
mr_presso(BetaOutcome = "Y_effect", BetaExposure = "E1_effect", SdOutcome = "Y_se", SdExposure = "E1_se", OUTLIERtest = TRUE, DISTORTIONtest = TRUE, data = SummaryStats, NbDistribution = 1000,  SignifThreshold = 0.05)
Y_effect
res = mr_presso(BetaOutcome = Gammah, BetaExposure = gammah,
SdOutcome = sqrt(sG2), SdExposure = sqrt(sg2), OUTLIERtest = TRUE, DISTORTIONtest = TRUE,  NbDistribution = 1000,  SignifThreshold = 0.05)
str(SummaryStats)
head(SummaryStats)
SummaryStats = data.frame(gammah = gammah,
Gammah = Gammah,
se1 = sqrt(sg2)ï¼Œ
se2 = sqrt(sG2));
SummaryStats = data.frame(gammah = gammah,
Gammah = Gammah,
se1 = sqrt(sg2),
se2 = sqrt(sG2));
head(SummaryStats)
sg2[1:5]
sqrt(sg2[1:5])
res = mr_presso(BetaOutcome = "Gammah", BetaExposure = "gammah",
SdOutcome = "se2", SdExposure = "se1",
OUTLIERtest = TRUE, DISTORTIONtest = TRUE, data = SummaryStats, NbDistribution = 1000,  SignifThreshold = 0.05)
res$`MR-PRESSO results`$`Distortion Test`$`Outliers Indices`
indxAL
match(indxAL,1:p)
match(1:p, indxAL)
which(is.na(match(1:p, indxAL)))
res$`MR-PRESSO results`$`Distortion Test`$`Outliers Indices
'
`
res$`MR-PRESSO results`$`Distortion Test`
res$`MR-PRESSO results`$`Distortion Test`$`Outliers Indices`
id1 = res$`MR-PRESSO results`$`Distortion Test`$`Outliers Indices`
id0 = which(is.na(match(1:p, indxAL)))
id1%in%id0
length(id1)
length(id0)
res = mr_presso(BetaOutcome = "Gammah", BetaExposure = "gammah",
SdOutcome = "se2", SdExposure = "se1",
OUTLIERtest = TRUE, DISTORTIONtest = TRUE, data = SummaryStats,
NbDistribution = 3000,  SignifThreshold = 0.05)
id1 = res$`MR-PRESSO results`$`Distortion Test`$`Outliers Indices`
length(id1)
id1%in%id0
res = mr_presso(BetaOutcome = "Gammah", BetaExposure = "gammah",
SdOutcome = "se2", SdExposure = "se1",
OUTLIERtest = TRUE, DISTORTIONtest = TRUE, data = SummaryStats,
NbDistribution = 5000,  SignifThreshold = 0.05)
id1 = res$`MR-PRESSO results`$`Distortion Test``$`Outliers Indices`
res$`MR-PRESSO results`$`Distortion Test``$`Outliers Indices`
id1 = res$`MR-PRESSO results`$`Distortion Test`$`Outliers Indices`
id1 = res$`MR-PRESSO results`$`Distortion Test`$`Outliers Indices`
id1
length(id1)
id1%in%id0
res = mr_presso(BetaOutcome = "Gammah", BetaExposure = "gammah",
SdOutcome = "se2", SdExposure = "se1",
OUTLIERtest = TRUE, DISTORTIONtest = TRUE, data = SummaryStats,
NbDistribution = 500,  SignifThreshold = 0.05)
res = mr_presso(BetaOutcome = "Gammah", BetaExposure = "gammah",
SdOutcome = "se2", SdExposure = "se1",
OUTLIERtest = TRUE, DISTORTIONtest = TRUE, data = SummaryStats,
NbDistribution = 2000,  SignifThreshold = 0.05)
id1 = res$`MR-PRESSO results`$`Distortion Test`$`Outliers Indices`
id1
length(id1)
res = mr_presso(BetaOutcome = "Gammah", BetaExposure = "gammah",
SdOutcome = "se2", SdExposure = "se1",
OUTLIERtest = TRUE, DISTORTIONtest = TRUE, data = SummaryStats,
NbDistribution = 10000,  SignifThreshold = 0.05)
id1 = res$`MR-PRESSO results`$`Distortion Test`$`Outliers Indices`
id1
length(id1)
res = mr_presso(BetaOutcome = "Gammah", BetaExposure = "gammah",
SdOutcome = "se2", SdExposure = "se1",
OUTLIERtest = TRUE, DISTORTIONtest = TRUE, data = SummaryStats,
NbDistribution = 1000,  SignifThreshold = 0.05)
id1 = res$`MR-PRESSO results`$`Distortion Test`$`Outliers Indices`
id1
length(id1)
id1%in%id0
length(id0)
B.pa
AlpGamcor.pa
# -------------------------------------------------------------------------------------
# initial value.
beta0 <- 0;
sgga2 <- 1;
agm <- bgm <- aal <- bal <- 0.001;
gamma <- rep(0.01, p);
alpha <- rep(0.01, p);
sgga2 <- 1;
sgal2 <- 1;
nblocks = L;
block_inf <- cbind(seq(0, p-M, M), seq(M-1, p, M));
# -------------------------------------------------------------------------------------
pxresult = MRLDP_SimPXvb(gammah, Gammah, sqrt(sg2), sqrt(sG2), gamma, alpha,  beta0, sgga2, sgal2, R,
0, epsStopLogLik, maxIter, model = 1);
tstat[irep, 1] = pxresult$tstat;
bres[irep, 1] = pxresult$beta0;
Iterres[irep, 1] = pxresult$Iteration;
Diff[irep, 1] = pxresult$diff;
pxresult$beta0;
id1 = res$`MR-PRESSO results`$`Distortion Test`$`Outliers Indices`
id1
respresso = mr_presso(BetaOutcome = "Gammah", BetaExposure = "gammah",
SdOutcome = "se2", SdExposure = "se1",
OUTLIERtest = TRUE, DISTORTIONtest = TRUE, data = SummaryStats,
NbDistribution = 1000,  SignifThreshold = 0.05)
idremove = respresso$`MR-PRESSO results`$`Distortion Test`$`Outliers Indices`
gammah_new = gammah[-idremove];
Gammah_new = Gammah[-idremove];
se1_new = se1[-idremove];
se2_new = se2[-idremove];
gamma_new <- rep(0.01, length(se1_new));
alpha_new <- rep(0.01, length(se1_new));
pxresult = MRLDP_SimPXvb(gammah_new, Gammah_new, se1_new, se2_new,
gamma_new, alpha_new,  beta0, sgga2, sgal2, R,
0, epsStopLogLik, maxIter, model = 1);
sg2 = sg2all[sig.indx];
sG2 = sG2all[sig.indx];
se1 = sqrt(sg2);
se2 = sqrt(sG2);
gammah = gammahall[sig.indx];
Gammah = Gammahall[sig.indx];
gammah_new = gammah[-idremove];
Gammah_new = Gammah[-idremove];
se1_new = se1[-idremove];
se2_new = se2[-idremove];
gamma_new <- rep(0.01, length(se1_new));
alpha_new <- rep(0.01, length(se1_new));
pxresult = MRLDP_SimPXvb(gammah_new, Gammah_new, se1_new, se2_new,
gamma_new, alpha_new,  beta0, sgga2, sgal2, R,
0, epsStopLogLik, maxIter, model = 1);
R_new = R[-idremove, -idremove]
pxresult = MRLDP_SimPXvb(gammah_new, Gammah_new, se1_new, se2_new,
gamma_new, alpha_new,  beta0, sgga2, sgal2, R,
0, epsStopLogLik, maxIter, model = 1);
R_new = R[-idremove, -idremove]
pxresult = MRLDP_SimPXvb(gammah_new, Gammah_new, se1_new, se2_new,
gamma_new, alpha_new,  beta0, sgga2, sgal2, R_new,
0, epsStopLogLik, maxIter, model = 1);
pxresult$beta0;
gamma <- rep(0.01, p);
alpha <- rep(0.01, p);
sgga2 <- 1;
sgal2 <- 1;
# -------------------------------------------------------------------------------------
pxresult = MRLDP_SimPXvb(gammah, Gammah, sqrt(sg2), sqrt(sG2), gamma, alpha,  beta0, sgga2, sgal2, R,
0, epsStopLogLik, maxIter, model = 1);
pxresult$beta0;
rho.pa = 0;
# Hz.pa <- c(0, 0.05, 0.1);
# Hz.pa = c(0.05, 0.1);
Hz.pa = c(0.05, 0.1);
# L.pa <- c(10, 20);
L.pa = 10
B.pa = c(0.1, 0);
# B.pa = 0;
LAM.pa = 0.055;
N3.pa = 500
# AL.pa = c(0.2, 0.4, 1);
RR.pa <- 0# indicate R equals true R(R==1) or not(R==0)
# AlpGamcor.pa = c(0.01, 0.05, 0.1);
AlpGamcor.pa = c(0.05,  0.1, 0.2, 0.4);
AlpGamcor.pa = 0.2;
Hy.pa = 0.2
AL.pa = 0.1;
Ga.pa = 1;
# AL.pa = 1;
para.all <- expand.grid(rho.pa, Hz.pa, L.pa, B.pa, RR.pa, LAM.pa, N3.pa, AlpGamcor.pa, AL.pa, Hy.pa, Ga.pa)
for(i in 1:nrow(para.all)){
assign(paste0("res",i), para.all[i, ])
}
nrow(para.all)
rho.pa = 0;
# Hz.pa <- c(0, 0.05, 0.1);
# Hz.pa = c(0.05, 0.1);
Hz.pa = c(0.05, 0.1);
# L.pa <- c(10, 20);
L.pa = 10
B.pa = c(0.1, 0);
# B.pa = 0;
LAM.pa = 0.055;
N3.pa = 500
# AL.pa = c(0.2, 0.4, 1);
RR.pa <- 0# indicate R equals true R(R==1) or not(R==0)
# AlpGamcor.pa = c(0.01, 0.05, 0.1);
AlpGamcor.pa = c(0.05,  0.1, 0.2, 0.4);
# AlpGamcor.pa = 0.2;
Hy.pa = 0.2
AL.pa = 0.1;
Ga.pa = 1;
# AL.pa = 1;
para.all <- expand.grid(rho.pa, Hz.pa, L.pa, B.pa, RR.pa, LAM.pa, N3.pa, AlpGamcor.pa, AL.pa, Hy.pa, Ga.pa)
for(i in 1:nrow(para.all)){
assign(paste0("res",i), para.all[i, ])
}
nrow(para.all)
id0 = which(is.na(match(1:p, indxAL)))
id0
idremove
idremove%in%id0
sum(idremove%in%id0)
AlpGamcor.pa = 0
Hy.pa = 0.2
AL.pa = 0.1;
Ga.pa = 1;
# AL.pa = 1;
para.all <- expand.grid(rho.pa, Hz.pa, L.pa, B.pa, RR.pa, LAM.pa, N3.pa, AlpGamcor.pa, AL.pa, Hy.pa, Ga.pa)
for(i in 1:nrow(para.all)){
assign(paste0("res",i), para.all[i, ])
}
#
para.iter <- res1;
rho <- as.numeric(res1[1]);
h2z <- as.numeric(res1[2]);
L <- as.numeric(res1[3]);
b0 <- as.numeric(res1[4]);
RT <- as.numeric(res1[5]);
lam <- as.numeric(res1[6]);
n3 <- as.numeric(res1[7]);
rho_ag <- as.numeric(res1[8]);
Alrate <- as.numeric(res1[9]);
h2y = as.numeric(res1[10]);
Garate = as.numeric(res1[11]);
M = 50;
p = M*L
n1 <- 20000;
n2 <- 20000;
m <- p;
bw <- ifelse(m>p,p,m);
filename <- paste0("r", 10*rho,  "hz", h2z*100, "hy", h2y*10,
"L", L, "b", b0, "R", RT,"lam", lam*100,"n3",
n3,"rho_ag",rho_ag*100, "Alrate", Alrate*10, "Garate", Garate*10,".Rdata");
if(b0!=0){nrep = 5;}else{nrep = 50}
IterMax <- 2000;
agm = bgm = 0.001
coreNum = 20;
epsStopLogLik = 1e-7;
maxIter = 10000;
bres = matrix(0, ncol = 4, nrow = nrep);
tstat = matrix(0, ncol = 4, nrow = nrep);
Iterres = matrix(0, ncol = 4, nrow = nrep);
se = pvehat = matrix(0, ncol = 2, nrow = nrep);
Diff = matrix(0, ncol = 4, nrow = nrep);
# ----------------------------------------------------------------
set.seed(2019);
# S0 = rho^(abs(matrix(rep(c(1:M),each=M),ncol=M,byrow=T) -matrix(rep(c(1:M),each=M),ncol=M)));
# S = kronecker(diag(L),S0);
# x = rmvnorm(n1+n2+n3, mean = rep(0, p), sigma = S, method = "chol");
# # -------------------------------------------------------------------
# Catergorize x into genoypte data 0, 1, 2
genRawGeno <- function(maf, L, M, rho, n){
SIGMA = matrix(nrow=M,ncol=M)
for (i in 1:M){
for (j in 1:M){
SIGMA[i,j] = rho^(abs(i-j));
}
}
nsnp = L*M;
X = NULL;
for ( l in 1:L ){
#set.seed(1000);
index = (M*(l-1)+1): (M*l);
AAprob = maf[index]^2.;
Aaprob = 2*maf[index]*(1-maf[index]);
quanti = matrix(c(1-Aaprob-AAprob, 1- AAprob),M,2);
Xt = rmvnorm(n, mean=rep(0,M), sigma=SIGMA, method="chol")
Xt2 = matrix(0,n,M);
for (j in 1:M){
cutoff = qnorm(quanti[j,]);
Xt2[Xt[,j] < cutoff[1],j] = 0;
Xt2[Xt[,j] >= cutoff[1] & Xt[,j] < cutoff[2],j] = 1;  ## attention
Xt2[Xt[,j] >= cutoff[2],j] = 2;
}
X <- cbind(X,Xt2);
}
return(X)
}
p = M*L;
maf = runif(p,0.05,0.5);
x = genRawGeno(maf, L, M, rho, n1 + n2 + n3);
# -------------------------------------------------------------------
x1 = x[1:n1,];
x2 = x[(n1+1):(n1+n2),];
x12 = x[1:(n1+n2),];
x3 = x[(n1+n2+1):(n1+n2+n3),];
if(RT==1){R = S}else{
R0 <- cor(x3);
# lam = 0.01;
R = pdsoft(R0, lam)$theta;
diag(R) <- rep(1, p);
mask = kronecker(diag(L),matrix(1,M,M));
R = R*mask;
}
set.seed(1000*irep + X);
Stm <- proc.time();
q = 50
u = matrix(rnorm( (n1+n2) * q),ncol=q);
# ------------------------------------------------------------------------
sigma2g = 1;
sigma2a = 1;
S_ag = matrix(c(sigma2a, rho_ag, rho_ag, sigma2g), nrow=2);
AG = rmvnorm(p, mean=rep(0, 2), sigma = S_ag,method="chol")
alpha = AG[,1]; gamma = AG[,2];
if(Alrate!=1){
alno = floor(p*(1 - Alrate));
indxAL = sample(1:p,alno);
alpha[indxAL] = 0;
}
if(Garate!=1){
gano = floor(p*(1 - Garate));
indxGA = sample(1:p,gano);
gamma[indxGA] = 0;
}
alno
Alrate
Alrate = 0
alno = floor(p*(1 - Alrate));
indxAL = sample(1:p,alno);
alpha[indxAL] = 0;
indxAL
alno
if(Alrate!=1){
alno = floor(p*(1 - Alrate));
indxAL = sample(1:p,alno);
alpha[indxAL] = 0;
}
if(Garate!=1){
gano = floor(p*(1 - Garate));
indxGA = sample(1:p,gano);
gamma[indxGA] = 0;
}
Su = matrix(c(1,0.8,0.8,1),nrow=2)
bu = rmvnorm(q,mean=rep(0,2), sigma = Su,method="chol")
by = bu[,1]; bz = bu[,2];
uby = u%*%by; ubz = u%*%bz;
uby = uby/sqrt(as.numeric(var(uby)/0.6));
ubz = ubz/sqrt(as.numeric(var(ubz)/0.2));
x12g = x12%*%gamma;
if(b0!=0){
h2ga = (h2y *( 1 + b0^2))/(b0^2 * (1 - h2y));
gamma0 = gamma/sqrt(as.numeric(var(x12g)/h2ga));
x12g = x12%*%gamma0;
}
yall = x12g + uby + rnorm(n1+n2)*as.numeric(sqrt(1-var(uby)));
# ------------------------------------------------------------------------
# The direct effects on Z
h2yb = var(b0*yall);
h2al = (h2z + h2z*h2yb)/(1 - h2z)
x12a = x12%*%alpha;
alpha0 = alpha/sqrt(as.numeric(var(x12a)/(h2al)));
x12a = x12%*%alpha0;
# ------------------------------------------------------------------------
#fm0 = lmm_pxem(y,matrix(rep(1,n1),ncol=1),x1, 100)
resz = ubz + rnorm(n1+n2)*as.numeric(sqrt(1-var(ubz)));
zall = b0*yall  + x12a +  resz;
H2a.res[irep] <- var(x12a)/var(zall);
H2g.res[irep] <- var(b0*x12g)/var(zall);
y = yall[1:n1];
z = zall[(n1+1):(n1+n2)];
# create summary statistics
gammahall = numeric(p); Gammahall = numeric(p);
sg2all = numeric(p); sG2all = numeric(p);
pval = numeric(p);
for (i in 1:p){
fm = lm(y~1+x1[,i]);
gammahall[i] = summary(fm)$coefficients[2,1];
sg2all[i] = summary(fm)$coefficients[2,2]^2;
pval[i] = summary(fm)$coefficients[2,4];
fm = lm(z~1+x2[,i]);
Gammahall[i] = summary(fm)$coefficients[2,1];
sG2all[i] = summary(fm)$coefficients[2,2]^2;
}
index = 1:p
sig.indx = index#[pval<0.05/p]
sg2 = sg2all[sig.indx];
sG2 = sG2all[sig.indx];
se1 = sqrt(sg2);
se2 = sqrt(sG2);
for (i in 1:p){
fm = lm(y~1+x1[,i]);
gammahall[i] = summary(fm)$coefficients[2,1];
sg2all[i] = summary(fm)$coefficients[2,2]^2;
pval[i] = summary(fm)$coefficients[2,4];
fm = lm(z~1+x2[,i]);
Gammahall[i] = summary(fm)$coefficients[2,1];
sG2all[i] = summary(fm)$coefficients[2,2]^2;
}
x12a
alpha
x12a = x12%*%alpha;
alpha0 = alpha/sqrt(as.numeric(var(x12a)/(h2al)));
alpha0
x12a = rep(0, p)
resz = ubz + rnorm(n1+n2)*as.numeric(sqrt(1-var(ubz)));
zall = b0*yall  + x12a +  resz;
H2a.res[irep] <- var(x12a)/var(zall);
H2g.res[irep] <- var(b0*x12g)/var(zall);
y = yall[1:n1];
z = zall[(n1+1):(n1+n2)];
# create summary statistics
gammahall = numeric(p); Gammahall = numeric(p);
sg2all = numeric(p); sG2all = numeric(p);
pval = numeric(p);
for (i in 1:p){
fm = lm(y~1+x1[,i]);
gammahall[i] = summary(fm)$coefficients[2,1];
sg2all[i] = summary(fm)$coefficients[2,2]^2;
pval[i] = summary(fm)$coefficients[2,4];
fm = lm(z~1+x2[,i]);
Gammahall[i] = summary(fm)$coefficients[2,1];
sG2all[i] = summary(fm)$coefficients[2,2]^2;
}
index = 1:p
sig.indx = index#[pval<0.05/p]
sg2 = sg2all[sig.indx];
sG2 = sG2all[sig.indx];
se1 = sqrt(sg2);
se2 = sqrt(sG2);
gammah = gammahall[sig.indx];
Gammah = Gammahall[sig.indx];
# initial value.
beta0 <- 0;
sgga2 <- 1;
sgga2 <- 1;
sgal2 <- 1;
# -------------------------------------------------------------------------------------
gamma <- rep(0.01, p);
alpha <- rep(0.01, p);
pxresult = MRLDP_SimPXvb(gammah, Gammah, se1, se2, gamma, alpha,  beta0, sgga2, sgal2, R,
0, epsStopLogLik, maxIter, model = 1);
tstat[irep, 1] = pxresult$tstat;
bres[irep, 1] = pxresult$beta0;
Iterres[irep, 1] = pxresult$Iteration;
Diff[irep, 1] = pxresult$diff;
if(b0==0){
pxresult1 = MRLDP_SimPXvb(gammah, Gammah, se1, se2, gamma, alpha,  beta0, sgga2, sgal2, R,
1, epsStopLogLik, maxIter, model = 1);
tstat[irep, 2] = pxresult1$tstat;
bres[irep, 2] = pxresult1$beta0;
# Iterres[irep, 2] = pxresult1$Iteration;
# Diff[irep, 2] = pxresult1$diff;
}
SummaryStats = data.frame(gammah = gammah, Gammah = Gammah,
se1 = se1, se2 = se2);
respresso = mr_presso(BetaOutcome = "Gammah", BetaExposure = "gammah",
SdOutcome = "se2", SdExposure = "se1",
OUTLIERtest = TRUE, DISTORTIONtest = TRUE, data = SummaryStats,
NbDistribution = 1000,  SignifThreshold = 0.05);
idremove
indxAL
id0 = which(is.na(match(1:p, indxAL)));
id0
length(id0)
id0
rho.pa = 0;
# Hz.pa <- c(0, 0.05, 0.1);
# Hz.pa = c(0.05, 0.1);
Hz.pa = c(0.05, 0.1);
# L.pa <- c(10, 20);
L.pa = 10
B.pa = c(0.1, 0);
# B.pa = 0;
LAM.pa = 0.055;
N3.pa = 500
# AL.pa = c(0.2, 0.4, 1);
RR.pa <- 0# indicate R equals true R(R==1) or not(R==0)
# AlpGamcor.pa = c(0.01, 0.05, 0.1);
AlpGamcor.pa = c(0.05,  0.1, 0.2, 0.4);
# Hy.pa = c(0.1, 0.5);
Hy.pa = 0.1
AL.pa = 0.1;
Ga.pa = 1;
# AL.pa = 1;
para.all <- expand.grid(rho.pa, Hz.pa, L.pa, B.pa, RR.pa, LAM.pa, N3.pa, AlpGamcor.pa, AL.pa, Hy.pa, Ga.pa)
for(i in 1:nrow(para.all)){
assign(paste0("res",i), para.all[i, ])
}
nrow(para.all)
library ( devtools );
install _ github (" QingCheng0218 /MR. LDP ")
library(devtools);
install_github("QingCheng0218/MR.LDP");
library(devtools);
install_github("QingCheng0218/MR.LDP");
setwd("F:/test/Rpackage/Rnewpackage")
library(Rcpp);
library(RcppArmadillo);
RcppArmadillo.package.skeleton("MR.LDP")
setwd("F:/test/Rpackage/Rnewpackage/MR.LDP")
compileAttributes(verbose=TRUE)
